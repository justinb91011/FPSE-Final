// Generated by ReScript, PLEASE EDIT WITH CARE

import * as List from "rescript/lib/es6/list.js";
import * as $$Array from "rescript/lib/es6/array.js";
import * as Fetch from "bs-fetch/src/Fetch.res.mjs";
import * as React from "react";
import * as Button from "../Button.res.mjs";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Js_promise from "rescript/lib/es6/js_promise.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_format from "rescript/lib/es6/caml_format.js";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.res.mjs";

function Game(props) {
  var difficulty = props.difficulty;
  console.log("This will be a " + difficulty + " game");
  var match = React.useState(function () {
        return false;
      });
  var setShowQuitForm = match[1];
  var match$1 = React.useState(function () {
        
      });
  var setPlayerInfo = match$1[1];
  var playerInfo = match$1[0];
  var match$2 = React.useState(function () {
        return [];
      });
  var setCpuPlayers = match$2[1];
  var match$3 = React.useState(function () {
        return false;
      });
  var setIsCpuTurn = match$3[1];
  var match$4 = React.useState(function () {
        return "Loading turn...";
      });
  var setCurrentTurn = match$4[1];
  var currentTurn = match$4[0];
  var backgroundStyle = {
    backgroundImage: "url('/gamecolor.jpg')",
    backgroundPosition: "center",
    height: "100vh",
    overflow: "hidden",
    position: "relative",
    width: "100vw",
    backgroundSize: "cover"
  };
  var cardMap = Js_dict.fromArray([
        [
          "Blue (Number 0)",
          "/card_images/blue-0-card.png"
        ],
        [
          "Blue (Number 1)",
          "/card_images/blue-1-card.png"
        ],
        [
          "Blue (Number 2)",
          "/card_images/blue-2-card.png"
        ],
        [
          "Blue (Number 3)",
          "/card_images/blue-3-card.png"
        ],
        [
          "Blue (Number 4)",
          "/card_images/blue-4-card.png"
        ],
        [
          "Blue (Number 5)",
          "/card_images/blue-5-card.png"
        ],
        [
          "Blue (Number 6)",
          "/card_images/blue-6-card.png"
        ],
        [
          "Blue (Number 7)",
          "/card_images/blue-7-card.png"
        ],
        [
          "Blue (Number 8)",
          "/card_images/blue-8-card.png"
        ],
        [
          "Blue (Number 9)",
          "/card_images/blue-9-card.png"
        ],
        [
          "Blue Reverse",
          "/card_images/blue-reverse-card.png"
        ],
        [
          "Blue Skip",
          "/card_images/blue-skip-card.png"
        ],
        [
          "Blue DrawTwo",
          "/card_images/blue-draw-two-card.png"
        ],
        [
          "Red (Number 0)",
          "/card_images/red-0-card.png"
        ],
        [
          "Red (Number 1)",
          "/card_images/red-1-card.png"
        ],
        [
          "Red (Number 2)",
          "/card_images/red-2-card.png"
        ],
        [
          "Red (Number 3)",
          "/card_images/red-3-card.png"
        ],
        [
          "Red (Number 4)",
          "/card_images/red-4-card.png"
        ],
        [
          "Red (Number 5)",
          "/card_images/red-5-card.png"
        ],
        [
          "Red (Number 6)",
          "/card_images/red-6-card.png"
        ],
        [
          "Red (Number 7)",
          "/card_images/red-7-card.png"
        ],
        [
          "Red (Number 8)",
          "/card_images/red-8-card.png"
        ],
        [
          "Red (Number 9)",
          "/card_images/red-9-card.png"
        ],
        [
          "Red Reverse",
          "/card_images/red-reverse-card.png"
        ],
        [
          "Red Skip",
          "/card_images/red-skip-card.png"
        ],
        [
          "Red DrawTwo",
          "/card_images/red-draw-two-card.png"
        ],
        [
          "Yellow (Number 0)",
          "/card_images/yellow-0-card.png"
        ],
        [
          "Yellow (Number 1)",
          "/card_images/yellow-1-card.png"
        ],
        [
          "Yellow (Number 2)",
          "/card_images/yellow-2-card.png"
        ],
        [
          "Yellow (Number 3)",
          "/card_images/yellow-3-card.png"
        ],
        [
          "Yellow (Number 4)",
          "/card_images/yellow-4-card.png"
        ],
        [
          "Yellow (Number 5)",
          "/card_images/yellow-5-card.png"
        ],
        [
          "Yellow (Number 6)",
          "/card_images/yellow-6-card.png"
        ],
        [
          "Yellow (Number 7)",
          "/card_images/yellow-7-card.png"
        ],
        [
          "Yellow (Number 8)",
          "/card_images/yellow-8-card.png"
        ],
        [
          "Yellow (Number 9)",
          "/card_images/yellow-9-card.png"
        ],
        [
          "Yellow Reverse",
          "/card_images/yellow-reverse-card.png"
        ],
        [
          "Yellow Skip",
          "/card_images/yellow-skip-card.png"
        ],
        [
          "Yellow DrawTwo",
          "/card_images/yellow-draw-two-card.png"
        ],
        [
          "Green (Number 0)",
          "/card_images/green-0-card.png"
        ],
        [
          "Green (Number 1)",
          "/card_images/green-1-card.png"
        ],
        [
          "Green (Number 2)",
          "/card_images/green-2-card.png"
        ],
        [
          "Green (Number 3)",
          "/card_images/green-3-card.png"
        ],
        [
          "Green (Number 4)",
          "/card_images/green-4-card.png"
        ],
        [
          "Green (Number 5)",
          "/card_images/green-5-card.png"
        ],
        [
          "Green (Number 6)",
          "/card_images/green-6-card.png"
        ],
        [
          "Green (Number 7)",
          "/card_images/green-7-card.png"
        ],
        [
          "Green (Number 8)",
          "/card_images/green-8-card.png"
        ],
        [
          "Green (Number 9)",
          "/card_images/green-9-card.png"
        ],
        [
          "Green Reverse",
          "/card_images/green-reverse-card.png"
        ],
        [
          "Green Skip",
          "/card_images/green-skip-card.png"
        ],
        [
          "Green DrawTwo",
          "/card_images/green-draw-two-card.png"
        ],
        [
          "WildColor DrawFour",
          "/card_images/wild-draw-four-card.png"
        ],
        [
          "WildColor WildValue",
          "/card_images/wild-card.png"
        ]
      ]);
  var cardImageUrl = function (card) {
    var url = Js_dict.get(cardMap, card);
    if (url !== undefined) {
      return url;
    } else {
      return "/card_images/unknown-card.png";
    }
  };
  var fetchGameInfo = function () {
    Js_promise.$$catch((function (param) {
            console.log("Error fetching game information");
            return Promise.resolve();
          }), Js_promise.then_((function (data) {
                var json = Js_json.decodeObject(data);
                if (json !== undefined) {
                  var player_name = Belt_Option.getExn(Js_json.decodeString(Belt_Option.getExn(Js_dict.get(json, "player_name"))));
                  var hand = $$Array.map((function (item) {
                          return Belt_Option.getExn(Js_json.decodeString(item));
                        }), Belt_Option.getExn(Js_json.decodeArray(Belt_Option.getExn(Js_dict.get(json, "hand")))));
                  var top_discard = Belt_Option.getExn(Js_json.decodeString(Belt_Option.getExn(Js_dict.get(json, "top_discard"))));
                  var currentTurnOpt = Belt_Option.flatMap(Js_dict.get(json, "current_turn"), Js_json.decodeString);
                  if (currentTurnOpt !== undefined) {
                    setCurrentTurn(function (param) {
                          return currentTurnOpt;
                        });
                  } else {
                    console.log("Error: Missing current_turn in JSON response");
                  }
                  setPlayerInfo(function (param) {
                        return [
                                player_name,
                                $$Array.to_list(hand),
                                top_discard
                              ];
                      });
                } else {
                  console.log("Invalid JSON format");
                }
                return Promise.resolve();
              }), Js_promise.then_((function (response) {
                    if (response.ok) {
                      return Fetch.$$Response.json(response);
                    } else {
                      return Promise.reject(Js_exn.raiseError("Failed to fetch game information"));
                    }
                  }), fetch("http://localhost:8080/"))));
  };
  var fetchCpuInfo = function () {
    Js_promise.$$catch((function (param) {
            console.log("Error fetching CPU information");
            return Promise.resolve();
          }), Js_promise.then_((function (data) {
                var json = Js_json.decodeObject(data);
                if (json !== undefined) {
                  var cpu_hands = Belt_Option.getExn(Js_json.decodeArray(Belt_Option.getExn(Js_dict.get(json, "cpu_hands"))));
                  var cpus = $$Array.map((function (cpuJson) {
                          var cpuObj = Belt_Option.getExn(Js_json.decodeObject(cpuJson));
                          var cpuName = Belt_Option.getExn(Js_json.decodeString(Belt_Option.getExn(Js_dict.get(cpuObj, "name"))));
                          var num_cards_float = Belt_Option.getExn(Js_json.decodeNumber(Belt_Option.getExn(Js_dict.get(cpuObj, "num_cards"))));
                          var num_cards_str = num_cards_float.toString();
                          var num_cards = Caml_format.int_of_string(num_cards_str);
                          return [
                                  cpuName,
                                  num_cards
                                ];
                        }), cpu_hands);
                  setCpuPlayers(function (param) {
                        return cpus;
                      });
                } else {
                  console.log("Invalid JSON for CPU hands");
                }
                return Promise.resolve();
              }), Js_promise.then_((function (response) {
                    if (response.ok) {
                      return Fetch.$$Response.json(response);
                    } else {
                      return Promise.reject(Js_exn.raiseError("Failed to fetch CPU information"));
                    }
                  }), fetch("http://localhost:8080/cpu_hands"))));
  };
  React.useEffect((function () {
          fetchGameInfo();
        }), []);
  React.useEffect((function () {
          if (playerInfo !== undefined) {
            fetchCpuInfo();
          }
          
        }), [playerInfo]);
  var handleCpuTurn = function (cpuName) {
    console.log(cpuName + " turn starting...");
    setTimeout((function () {
            var postInit = {
              method: "POST"
            };
            Js_promise.$$catch((function (err) {
                    console.log("Error during " + cpuName + "'s turn:");
                    console.log(err);
                    setIsCpuTurn(function (param) {
                          return false;
                        });
                    return Promise.resolve();
                  }), Js_promise.then_((function (data) {
                        console.log(cpuName + " turn completed:");
                        console.log(data);
                        fetchGameInfo();
                        fetchCpuInfo();
                        return Promise.resolve();
                      }), Js_promise.then_((function (response) {
                            if (response.ok) {
                              return Fetch.$$Response.text(response);
                            } else {
                              return Promise.reject(Js_exn.raiseError("Failed to process CPU turn"));
                            }
                          }), fetch("http://localhost:8080/cpu_turn", postInit))));
          }), 3000);
  };
  React.useEffect((function () {
          switch (currentTurn) {
            case "CPU1" :
                console.log("Handling CPU1 turn...");
                setIsCpuTurn(function (param) {
                      return true;
                    });
                handleCpuTurn("CPU1");
                break;
            case "CPU2" :
                console.log("Handling CPU2 turn...");
                setIsCpuTurn(function (param) {
                      return true;
                    });
                handleCpuTurn("CPU2");
                break;
            default:
              console.log("It's not a CPU's turn: " + currentTurn);
              setIsCpuTurn(function (param) {
                    return false;
                  });
          }
        }), [currentTurn]);
  var tmp;
  if (match[0]) {
    tmp = JsxRuntime.jsxs("div", {
          children: [
            JsxRuntime.jsx("h2", {
                  children: "Are you sure you want to quit?",
                  className: "text-2xl font-semibold mb-4"
                }),
            JsxRuntime.jsxs("div", {
                  children: [
                    JsxRuntime.jsx(Button.make, {
                          className: "px-10 py-2 bg-red-500 text-white font-bold rounded",
                          onClick: (function (param) {
                              RescriptReactRouter.push("/");
                            }),
                          children: "Yes"
                        }),
                    JsxRuntime.jsx(Button.make, {
                          className: "px-10 py-2 bg-green-500 text-white font-bold rounded",
                          onClick: (function (param) {
                              setShowQuitForm(function (param) {
                                    return false;
                                  });
                            }),
                          children: "No"
                        })
                  ],
                  className: "flex justify-between mt-6"
                })
          ],
          style: {
            backgroundColor: "white",
            left: "50%",
            padding: "20px",
            position: "absolute",
            textAlign: "center",
            top: "50%",
            borderRadius: "8px",
            boxShadow: "0 4px 6px rgba(0, 0, 0, 0.1)",
            transform: "translate(-50%, -50%)"
          }
        });
  } else if (playerInfo !== undefined) {
    var top_discard = playerInfo[2];
    tmp = JsxRuntime.jsxs(JsxRuntime.Fragment, {
          children: [
            JsxRuntime.jsx("div", {
                  children: JsxRuntime.jsx("h2", {
                        children: currentTurn + "'s Turn"
                      }),
                  style: {
                    color: "white",
                    fontSize: "20px",
                    fontWeight: "bold",
                    left: "50%",
                    position: "absolute",
                    textAlign: "center",
                    top: "10px",
                    transform: "translateX(-50%)"
                  }
                }),
            JsxRuntime.jsx("div", {
                  children: $$Array.map((function (param) {
                          var cpuName = param[0];
                          return JsxRuntime.jsxs("div", {
                                      children: [
                                        JsxRuntime.jsx("h2", {
                                              children: cpuName
                                            }),
                                        JsxRuntime.jsx("ul", {
                                              children: $$Array.map((function (i) {
                                                      return JsxRuntime.jsx("li", {
                                                                  children: JsxRuntime.jsx("img", {
                                                                        style: {
                                                                          width: "70px",
                                                                          transform: "rotate(90deg)"
                                                                        },
                                                                        alt: "Card Back",
                                                                        src: "/card_images/back-card.png"
                                                                      })
                                                                }, String(i));
                                                    }), Belt_Array.range(0, param[1] - 1 | 0)),
                                              style: {
                                                display: "flex",
                                                listStyle: "none",
                                                padding: "0",
                                                flexDirection: "column",
                                                justifyContent: "center",
                                                gap: "1px"
                                              }
                                            })
                                      ],
                                      style: {
                                        color: "white",
                                        textAlign: "center"
                                      }
                                    }, cpuName);
                        }), match$2[0]),
                  style: {
                    display: "flex",
                    paddingRight: "80px",
                    paddingLeft: "80px",
                    width: "100%",
                    alignItems: "center",
                    justifyContent: "space-between"
                  }
                }),
            JsxRuntime.jsx(Button.make, {
                  className: "absolute bottom-4 left-4 px-4 py-2 bg-yellow-400 text-black font-bold rounded",
                  onClick: (function (param) {
                      setShowQuitForm(function (param) {
                            return true;
                          });
                    }),
                  children: "Quit"
                }),
            JsxRuntime.jsx("h1", {
                  children: "Game Page for " + difficulty + " Difficulty",
                  style: {
                    color: "white",
                    textAlign: "center"
                  }
                }),
            JsxRuntime.jsx("div", {
                  children: JsxRuntime.jsx("img", {
                        style: {
                          width: "80px"
                        },
                        alt: top_discard,
                        src: cardImageUrl(top_discard)
                      }),
                  style: {
                    left: "50%",
                    position: "absolute",
                    textAlign: "center",
                    top: "50%",
                    transform: "translate(-50%, -50%)"
                  }
                }),
            JsxRuntime.jsxs("div", {
                  children: [
                    JsxRuntime.jsx("h3", {
                          children: playerInfo[0] + "'s Hand:"
                        }),
                    JsxRuntime.jsx("ul", {
                          children: Belt_List.toArray(List.mapi((function (index, card) {
                                      return JsxRuntime.jsx("li", {
                                                  children: JsxRuntime.jsx("img", {
                                                        style: {
                                                          width: "80px"
                                                        },
                                                        alt: card,
                                                        src: cardImageUrl(card),
                                                        onClick: (function (param) {
                                                            var isWild = card === "WildColor DrawFour" || card === "WildColor WildValue";
                                                            var chosenColor = isWild ? prompt("Choose a color: Blue, Red, Green, Yellow") : null;
                                                            var chosenColorParam;
                                                            if (isWild) {
                                                              if (chosenColor == null) {
                                                                console.log("No color chosen, aborting play.");
                                                                chosenColorParam = undefined;
                                                              } else {
                                                                var trimmedColor = chosenColor.trim();
                                                                if (trimmedColor === "Blue" || trimmedColor === "Red" || trimmedColor === "Green" || trimmedColor === "Yellow") {
                                                                  chosenColorParam = "&chosen_color=" + trimmedColor;
                                                                } else {
                                                                  alert("Invalid color chosen. Must be Blue, Red, Green, or Yellow.");
                                                                  chosenColorParam = undefined;
                                                                }
                                                              }
                                                            } else {
                                                              chosenColorParam = undefined;
                                                            }
                                                            if (chosenColorParam !== undefined) {
                                                              var url = "http://localhost:8080/play?card_index=" + String(index) + chosenColorParam;
                                                              var postInit = {
                                                                method: "POST"
                                                              };
                                                              Js_promise.$$catch((function (param) {
                                                                      alert("Failed to play card.");
                                                                      return Promise.resolve();
                                                                    }), Js_promise.then_((function (data) {
                                                                          var dataObj = Js_json.decodeObject(data);
                                                                          if (dataObj !== undefined) {
                                                                            var errorVal = Js_dict.get(dataObj, "error");
                                                                            if (errorVal !== undefined) {
                                                                              var errStr = Belt_Option.getExn(Js_json.decodeString(errorVal));
                                                                              alert("Error: " + errStr);
                                                                            } else {
                                                                              var msgVal = Js_dict.get(dataObj, "message");
                                                                              if (msgVal !== undefined) {
                                                                                var msgStr = Belt_Option.getExn(Js_json.decodeString(msgVal));
                                                                                alert(msgStr);
                                                                              }
                                                                              fetchGameInfo();
                                                                              fetchCpuInfo();
                                                                              setIsCpuTurn(function (param) {
                                                                                    return true;
                                                                                  });
                                                                            }
                                                                          }
                                                                          return Promise.resolve();
                                                                        }), Js_promise.then_((function (response) {
                                                                              return Fetch.$$Response.json(response);
                                                                            }), fetch(url, postInit))));
                                                              return ;
                                                            }
                                                            if (isWild) {
                                                              return ;
                                                            }
                                                            var url$1 = "http://localhost:8080/play?card_index=" + String(index);
                                                            var postInit$1 = {
                                                              method: "POST"
                                                            };
                                                            Js_promise.$$catch((function (param) {
                                                                    alert("Failed to play card.");
                                                                    return Promise.resolve();
                                                                  }), Js_promise.then_((function (data) {
                                                                        var dataObj = Js_json.decodeObject(data);
                                                                        if (dataObj !== undefined) {
                                                                          var errorVal = Js_dict.get(dataObj, "error");
                                                                          if (errorVal !== undefined) {
                                                                            var errStr = Belt_Option.getExn(Js_json.decodeString(errorVal));
                                                                            alert("Error: " + errStr);
                                                                          } else {
                                                                            var msgVal = Js_dict.get(dataObj, "message");
                                                                            if (msgVal !== undefined) {
                                                                              var msgStr = Belt_Option.getExn(Js_json.decodeString(msgVal));
                                                                              alert(msgStr);
                                                                            }
                                                                            fetchGameInfo();
                                                                            fetchCpuInfo();
                                                                            setIsCpuTurn(function (param) {
                                                                                  return true;
                                                                                });
                                                                          }
                                                                        }
                                                                        return Promise.resolve();
                                                                      }), Js_promise.then_((function (response) {
                                                                            return Fetch.$$Response.json(response);
                                                                          }), fetch(url$1, postInit$1))));
                                                          })
                                                      })
                                                }, card);
                                    }), playerInfo[1])),
                          style: {
                            display: "flex",
                            listStyle: "none",
                            padding: "0",
                            justifyContent: "center",
                            gap: "1px"
                          }
                        })
                  ],
                  style: {
                    bottom: "20px",
                    color: "white",
                    left: "50%",
                    position: "absolute",
                    textAlign: "center",
                    transform: "translateX(-50%)"
                  }
                })
          ]
        });
  } else {
    tmp = JsxRuntime.jsxs(JsxRuntime.Fragment, {
          children: [
            JsxRuntime.jsx(Button.make, {
                  className: "absolute bottom-4 left-4 px-4 py-2 bg-yellow-400 text-black font-bold rounded",
                  onClick: (function (param) {
                      setShowQuitForm(function (param) {
                            return true;
                          });
                    }),
                  children: "Quit"
                }),
            JsxRuntime.jsx("p", {
                  children: "Loading game information...",
                  style: {
                    color: "white"
                  }
                })
          ]
        });
  }
  return JsxRuntime.jsx("div", {
              children: tmp,
              style: backgroundStyle
            });
}

var make = Game;

export {
  make ,
}
/* react Not a pure module */
