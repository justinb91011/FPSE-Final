// Generated by ReScript, PLEASE EDIT WITH CARE

import * as List from "rescript/lib/es6/list.js";
import * as $$Array from "rescript/lib/es6/array.js";
import * as Fetch from "bs-fetch/src/Fetch.res.mjs";
import * as React from "react";
import * as Button from "../Button.res.mjs";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Js_json from "rescript/lib/es6/js_json.js";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Js_promise from "rescript/lib/es6/js_promise.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as JsxRuntime from "react/jsx-runtime";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.res.mjs";

function Game(props) {
  var difficulty = props.difficulty;
  console.log("This will be a " + difficulty + " game");
  var match = React.useState(function () {
        return false;
      });
  var setShowQuitForm = match[1];
  var match$1 = React.useState(function () {
        
      });
  var setPlayerInfo = match$1[1];
  var playerInfo = match$1[0];
  var backgroundStyle = {
    backgroundImage: "url('/gamecolor.jpg')",
    backgroundPosition: "center",
    height: "100vh",
    position: "relative",
    width: "100vw",
    backgroundSize: "cover"
  };
  React.useEffect((function () {
          var fetchGameInfo = function () {
            Js_promise.$$catch((function (param) {
                    console.log("Error fetching game information");
                    return Promise.resolve();
                  }), Js_promise.then_((function (data) {
                        var json = Js_json.decodeObject(data);
                        if (json !== undefined) {
                          var player_name = Belt_Option.getExn(Js_json.decodeString(Belt_Option.getExn(Js_dict.get(json, "player_name"))));
                          var hand = $$Array.map((function (item) {
                                  return Belt_Option.getExn(Js_json.decodeString(item));
                                }), Belt_Option.getExn(Js_json.decodeArray(Belt_Option.getExn(Js_dict.get(json, "hand")))));
                          var top_discard = Belt_Option.getExn(Js_json.decodeString(Belt_Option.getExn(Js_dict.get(json, "top_discard"))));
                          setPlayerInfo(function (param) {
                                return [
                                        player_name,
                                        $$Array.to_list(hand),
                                        top_discard
                                      ];
                              });
                        } else {
                          console.log("Invalid JSON format");
                        }
                        return Promise.resolve();
                      }), Js_promise.then_((function (response) {
                            if (response.ok) {
                              return Fetch.$$Response.json(response);
                            } else {
                              return Promise.reject(Js_exn.raiseError("Failed to fetch game information"));
                            }
                          }), fetch("http://localhost:8080/"))));
          };
          fetchGameInfo();
        }), []);
  return JsxRuntime.jsx("div", {
              children: match[0] ? JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsx("h2", {
                              children: "Are you sure you want to quit?",
                              className: "text-2xl font-semibold mb-4"
                            }),
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx(Button.make, {
                                      className: "px-10 py-2 bg-red-500 text-white font-bold rounded",
                                      onClick: (function (param) {
                                          RescriptReactRouter.push("/");
                                        }),
                                      children: "Yes"
                                    }),
                                JsxRuntime.jsx(Button.make, {
                                      className: "px-10 py-2 bg-green-500 text-white font-bold rounded",
                                      onClick: (function (param) {
                                          setShowQuitForm(function (param) {
                                                return false;
                                              });
                                        }),
                                      children: "No"
                                    })
                              ],
                              className: "flex justify-between mt-6"
                            })
                      ],
                      style: {
                        backgroundColor: "white",
                        left: "50%",
                        padding: "20px",
                        position: "absolute",
                        textAlign: "center",
                        top: "50%",
                        borderRadius: "8px",
                        boxShadow: "0 4px 6px rgba(0, 0, 0, 0.1)",
                        transform: "translate(-50%, -50%)"
                      }
                    }) : JsxRuntime.jsxs(JsxRuntime.Fragment, {
                      children: [
                        JsxRuntime.jsx(Button.make, {
                              className: "absolute bottom-4 left-4 px-4 py-2 bg-yellow-400 text-black font-bold rounded",
                              onClick: (function (param) {
                                  setShowQuitForm(function (param) {
                                        return true;
                                      });
                                }),
                              children: "Quit"
                            }),
                        JsxRuntime.jsx("h1", {
                              children: "Game Page for " + difficulty + " Difficulty",
                              style: {
                                color: "white",
                                textAlign: "center"
                              }
                            }),
                        playerInfo !== undefined ? JsxRuntime.jsxs(JsxRuntime.Fragment, {
                                children: [
                                  JsxRuntime.jsxs("div", {
                                        children: [
                                          JsxRuntime.jsx("h2", {
                                                children: "Player: " + playerInfo[0]
                                              }),
                                          JsxRuntime.jsx("h3", {
                                                children: "Top of Discard Pile: " + playerInfo[2]
                                              })
                                        ],
                                        style: {
                                          color: "white",
                                          marginBottom: "50px",
                                          textAlign: "center"
                                        }
                                      }),
                                  JsxRuntime.jsxs("div", {
                                        children: [
                                          JsxRuntime.jsx("h3", {
                                                children: "Your Hand:"
                                              }),
                                          JsxRuntime.jsx("ul", {
                                                children: Belt_List.toArray(List.map((function (card) {
                                                            return JsxRuntime.jsx("li", {
                                                                        children: card
                                                                      }, card);
                                                          }), playerInfo[1]))
                                              })
                                        ],
                                        style: {
                                          bottom: "20px",
                                          color: "white",
                                          left: "50%",
                                          position: "absolute",
                                          textAlign: "center",
                                          transform: "translateX(-50%)"
                                        }
                                      })
                                ]
                              }) : JsxRuntime.jsx("p", {
                                children: "Loading game information...",
                                style: {
                                  color: "white"
                                }
                              })
                      ]
                    }),
              style: backgroundStyle
            });
}

var make = Game;

export {
  make ,
}
/* react Not a pure module */
